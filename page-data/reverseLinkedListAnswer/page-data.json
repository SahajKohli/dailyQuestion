{"componentChunkName":"component---src-templates-answer-template-js","path":"/reverseLinkedListAnswer","result":{"data":{"file":{"childMarkdownRemark":{"html":"<p>Let's start by taking a look at this example:</p>\n<p>Example 1:</p>\n<pre><code>1->2->3->4->5->null\n\nExpected:\n5->4->3->2->1->null\n</code></pre>\n<p>This is what the class looks like:</p>\n<div align=\"left\">\n<pre><code>static class LinkedList {\n    int value;\n    LinkedList next = null;\n\n    public LinkedList(int value) {\n        this.value = value;\n    }\n}\n</code></pre>\n</div>\n<p>Let's start by initializing a new node to null, this will be become our previous pointer. We will also keep a Current pointer that will point to the current node we are looking at.\nUsing these two pointers we can iterate over the list and reverse it. Let's take a look how:</p>\n<p>We have the following list: </p>\n<pre><code>1->2->3->4->5->null\n\npreviousNode = null\ncurrentPointer = 1 (the head of the list)\n</code></pre>\n<p>We start our iteration by setting out start values of previousNode to null and currentPoint to head. </p>\n<p>Lets set up out loop so that we end when currentPointer is equal to null, that's when we know we've gone through the entire list.</p>\n<pre><code>while(currentPointer != null){\n\n    // logic\n\n}\n</code></pre>\n<p>Per loop we have to save the next node from currentNode that we are at so that we don't loose it (remember if you don't have any reference to a node you can't access it). Here's what that looks like:</p>\n<pre><code>1->2->3->4->5->null\n\npreviousNode = null\ncurrentPointer = 1 (the head of the list)\ntempNode = 2 (the next after currentPointer)\n</code></pre>\n<p>Now that we have access to the next one, we can set the value of next for the currentPointer to previousNode, so we set the next for 1 is now null. </p>\n<pre><code>1->2->3->4->5->null\n\npreviousNode = null\ncurrentPointer = 1 (the head of the list)\ncurrentPointer.next = previousNode (null)\ntempNode = 2 (the next after currentPointer)\n</code></pre>\n<p>Then we set up for our next loop so we set our previousNode to currentPointer and currentPointer to the tempNode we saved earlier</p>\n<pre><code>1->2->3->4->5->null\n\npreviousNode = currentPointer (1)\ncurrentPointer = tempNode (2)\ntempNode = 2 \n</code></pre>\n<p>Now we keep doing this until we reach null for currentPointer and we will reach the end with all nodes reversed. </p>\n<p>Here's what the rest of the code looks like:</p>\n<div align=\"left\">\n<pre><code>public static LinkedList reverseLinkedList(LinkedList head) {\n    LinkedList prev = null;\n    LinkedList curr = head;\n\n    while(curr != null){\n        LinkedList temp = curr;\n        curr.next = prev;\n        prev = temp;\n        curr = curr.next;\n    }\n    return head;\n}\n</code></pre>\n</div>\n<p>Hope you found this helpful, if you still don't understand the logic here, take a look at this explanation:\n<a href=\"https://www.geeksforgeeks.org/reverse-a-linked-list/\">Click Here for more</a></p>","frontmatter":{"title":"Reverse Linked List","question":"reverseLinkedList","date":"May 13th, 2020"}}}},"pageContext":{"relativePath":"answers/reverseLinkedListAnswer.md"}}}