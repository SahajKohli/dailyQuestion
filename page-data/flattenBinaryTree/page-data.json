{"componentChunkName":"component---src-templates-question-template-js","path":"/flattenBinaryTree","result":{"data":{"file":{"relativePath":"questions/flattenBinaryTree.md","childMarkdownRemark":{"html":"<p>Back with another question today, this one's a little harder then the other ones.</p>\n<h3>I want to easily go through a binary tree without having to traverse it in a tree way, so I'm going to ask you to flatten the tree. A flattened tree is similar to the binary tree execpt it uses its left and right pointers like a doubly linked list.</h3>\n<p>Here's an example:</p>\n<pre><code>    10\n   /  \\\n  5    15\n / \\     \\\n1   11    19\n\nThe tree after being flattened would look like:\n\n1 &#x3C;-> 5 &#x3C;-> 11 &#x3C;-> 10 &#x3C;-> 19 &#x3C;-> 15\n</code></pre>\n<p>Assume your class (if your working with Java) looks like this:</p>\n<div align=\"left\">\n<pre><code>    static class BinaryTree {\n        int value;\n        BinaryTree left = null;\n        BinaryTree right = null;\n\n        public BinaryTree(int value) {\n            this.value = value;\n        }\n    }\n</code></pre>\n</div>","frontmatter":{"title":"Flatten a Binary Tree","answer":"flattenBinaryTreeAnswer","date":"May 15th, 2020"}}}},"pageContext":{"relativePath":"questions/flattenBinaryTree.md"}}}